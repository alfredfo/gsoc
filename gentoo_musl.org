#+TITLE: Gentoo GSoC Application
#+AUTHOR: Alfred Persson Forsberg <cat@catcream.org>
#+DATE:
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage[margin=1.0in]{geometry}

* Abstract
musl is a simple libc implementation focused on being secure and standard comformant.
It provdes C bindings for interacting with Linux interfaces as well as pure C functions such as strstr and sqrt.
musl claims to be both forward and backwards compatible between releases and it is much smaller and lighter than glibc.

* Objective
The goal of this project is to improve the number of packages to run with musl libc on Gentoo, with a focus on desktop and development use-cases.
Primarily the Plasma desktop environment along with the KDE Applications and QT libraries.

As musl is developed with security in mind I hope this project will make it become the default libc implementation for Gentoo hardened desktops.
I also hope that more binary packages (*-bin) will become statically linked with musl for ensuring compatibility with every setup, regardless of the system libc implementation.

musl is also known for being able to find runtime bugs for software buildable with glibc. These bugs will also be reported benefiting both musl and glibc users.

To make the switch from glibc to musl for new users as painless as possible I will also write documentation for
running glibc applications where the source code is not available / software which does not yet build with musl.


* Deliverables
+ Full KDE Plasma desktop and QT libraries (qtwebengine!), focus on Wayland and PipeWire. 
+ Web browsers, qutebrowser should just work with qtwebengine ported.

This project when finished will consist of:
+ Patches/commits/pull requests etc. to upstream projects.
  Getting fixes for musl upstream is better than just having patches for Gentoo because it means that more people can use it and
  the developers of these projects will most likely continue support for musl instead of downstream patches breaking when the code changes. 
+ Patches (.patch files) for Gentoo and commits to gentoo.git.
  Though getting the patches merged upstream is ideal, sometimes it's not possible. For example if the project is dead/abandoned or
  if it only applies to Gentoo systems.
+ Documentation for other developers who want to contribute and port software for musl.
  Extending [1].
+ Documentation for users who want to run glibc software.
  Extending [2] with documentation for running desktop applications with sound and graphics. Including PipeWire, Wayland, X & PulseAudio.
  From my testing both software inside a glibc chroot and Flatpaks runs great. A simple guide on how to take a tarball with proprietary software
  and turn it into a Flatpak with flatpak-builder will be available, as well as setting up sound and graphics for a chrooted Gentoo glibc environment.
+ The removal of the ::musl overlay.
  All patches will be put in ::gentoo and musl will "just be supported" without the need of an overlay repository.
+ A simple blog with my progress! I will put everything there and then rewrite important parts as documentation on the Gentoo wiki.


* Timeline
Expected 350 hours. (12 weeks, 28h/week)
Will work 6 hours a day on mon, tue, wed & thu and 5 hours on sundays.
Further info after discussion with mentor.

+ Setting up an ideal working environment and learning the workflow of Gentoo will be done before the project starts,
   mostly during the "Community Bonding"-period.
  
Most of my project will be around porting the KDE desktop and application suite,
starting with getting the desktop itself to run and later on porting the applications.
I will divide packages into three groups: builds, runs and "passes test suites".
** Week 1 & 2
Getting core libraries ported so Plasma can build correctly.
   + the QT libraries (except qtwebengine)
   + kde-plasma/kwayland-server
   + kde-plasma/libk*
** Week 3 & 4
The Plasma desktop itself, starting with the basic parts like the window manager.
Then making sure other essential parts like the dock, settings panel and status bar function correctly.
This means kde-plasma/plasma-meta will run.
** Week 5
Making sure the KDE desktop runs correctly by passing all test suites and manually checking for runtime bugs.
By week 5 most, if not all, tests should pass for the software currently ported.
This week will be dedicated to squashing all the bugs and polishing my work this far. 
** Week 6
Getting a web browser to run like Qutebrowser, which should just build when dev-qt/qtwebengine works.
** Week 7
Porting core KDE applications, namely Dolphin, Konsole and Ark.
These should pass test suites.
** Week 8 to 11
The rest of the KDE suite of applications. Most applications should run without issues. Some more obscure, dead or useless ones will be skipped.
** Week 12
This week will be fully dedicated to writing documentation, mostly a musl porting guide for other developers.
   
   
Documentation will be written continuously during the project, and blog posts will be made at the end of each week.
If I discover something I want to write about / think is extremely useful I may write a separate blog post for that at any time during the project as well. 


* Biography
Hello! My name is Alfred. I am a Swedish 19 year old and I've been a Gentoo user for around 1.5 years now comming from Windows and macOS.
I think Gentoo is an awesome operating system because it gives the user so much control.
I currently run Gentoo/musl on my laptop with Sway and Pipewire with the intent of putting it on my espressobin router as well.


I am a student currently studying first year of electrical engineering at Chalmers University of Technology.
In high school I studied science with mathematical specialization at Hvitfeldtska (standard science programme + 4 extra math courses in
logic, problem solving, calculus, etc.).
I will therefore also work on getting CAD software, typesetting software like *TeX, Octave and software for my router to work on musl,
although that is not included in this project so that I can have a reasonable scope and clear deliverables. 


Since I was a kid I've always had an interest in computer software, specifically how to break it and make it do whatever you want.
My first step into programming and computer science was with game hacking. When I was in 7th grade (13 years old) I downloaded source code for
cheats, I was curious how it worked so I started to experiment with it by for example rewriting parts of the program and adding functionality by mostly
looking at other projects.
Having almost never coded before I got hooked to an extreme level and I wanted to learn more and more, which made me learn C++ quickly.
Game hacking was also my first step into debugging, assembly and operating system programming, which has been useful since.
After starting high school I pretty much stopped working on large projects due to lack of time and I hope GSoC can change that!

I've never seriously contributed to free software projects and most patches or knowledge I've just kept to myself instead of sharing it with others.
I really hope Google Summer of Code can change that and I hope to later become part of the Gentoo team.

** References
[1] https://wiki.gentoo.org/wiki/User:Sam/Musl_porting_notes
[2] https://wiki.gentoo.org/wiki/Chroot
