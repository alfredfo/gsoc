#+TITLE: Gentoo GSoC 2023 Application for Bootstapping Gentoo with The LLVM C Library
#+AUTHOR: Alfred Persson Forsberg <cat@catcream.org>
#+DATE:
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage[margin=1.0in]{geometry}

* Introduction
The *C standard library*, normally written *libc*, is a library for
the C programming language providing a standardized interface to
the operating system, as well as many other built-in C functions.

On Gentoo Linux there are currently two supported standard C libraries, namely
*glibc* (~sys-libs/glibc~) and *musl* (~sys-libs/musl~). However,
packages in ~::gentoo~ are not actually targeting specific libc's. Instead, they
target standards such as *POSIX* and *ISO C*. Therefore, any libc
fully implementing these standards should work in Gentoo.

Note that there are exceptions to this, notably packages that
target extended functionality provided by glibc. These are commonly
refered to as *GNU extensions*. In fact, my GSoC project last year was
about improving musl support for Gentoo. This almost exclusively
involved replacing usage of GNU extensions with standards compliant
alternatives. For this reason, efforts made to support additional platforms such as
LLVM libc will increase software portability as a whole, which
benefits everyone.

** The LLVM C Library
*The LLVM C Library*, or *LLVM libc*, is a relatively new libc
implementation part of the LLVM project. It is currently in use in
Google's Fuchsia operating system together with musl libc, but it also
works under the the Linux kernel.

It is developed with LLVM tooling in mind for excellent testing,
fuzzing and sanitizer support. One can also easily replace or pick and
choose functionality to for example get consistent math precision for
~libm~.

The libc tries to stay clear of any assembly language and efforts will
instead be made to improve code generation in the compiler.

*** Standards compliance
LLVM libc will be compliant with POSIX and recent C standards, such as
C17 and C23.

*** Build modes
Interestingly this libc can be built in both *fullbuild mode* and
*overlay mode*.

Fullbuild mode is the traditional way of building a libc, meaning that
the libc will be built as ~libc.a~ and all executables depending
libc functionality will link to it as usual.

Overlay mode on the other hand builds LLVM libc as ~libllvmlibc.a~ and
does not replace the system libc implementation completely. Instead it
uses link order semantics to primarily link binaries to LLVM libc, and
missing functions will instead be linked to the system
libc. [fn::Dynamic linking is not yet supported, hence only .a].

*** Current Deficiencies of LLVM libc
LLVM libc is still incomplete and lacks functionality one
may assume, such as dynamic linking and the ability to use ~libc++~
for linking C++ programs. However, this is planned for the future.

* Objective
The goal of this project is to get a Gentoo Linux system running with LLVM
libc as the system libc, in other words, bootstrapping Portage
on a llvm-libc/Linux system. The first big step here will be getting Python
running for Portage. When this is done I will continue working on
getting more software from ::gentoo running with LLVM libc. My goal is
to have a working terminal-based desktop with simple utilities, and an
experimental stage3 for others who want to contribute, or simply want
to try something new :)

** Crossdev
Using *crossdev* I will also create a cross compiler for
~x86_64-gentoo-linux-llvm~. To do this I will need to add entries for
LLVM libc in ~gnuconfig~ and also make sure all ebuilds build with
the  ~-static~ flag as LLVM libc currently does not support dynamic
linking.

*** Extending Crossdev with compiler-rt Building Support
As a side project I will also extend crossdev to allow building
~compiler-rt~ for other triples than the host so that ~Clang~ can be
used as a cross compiler. Currently the ~sys-libs/compiler-rt~ ebuild
does not respect the ~LLVM_TARGETS~ USE-flag because it
needs to target a triple, not just processor arcitecture.

My idea here is to extend it in such a way that
~crossdev --llvm -t x86_64-gentoo-linux-llvm~ builds
~sys-libs/compiler-rt~ for the specified
triple, and also makes sure that the host's LLVM toolchain supports
the target architecture by checking the ~LLVM_TARGET~ USE-flag.
* Feasibility
I have spoken with Michael Jones, a LLVM libc developer, about this
project and gotten a very positive response. My guess is that the
hardest thing to get running here is Python. Thankfully it can be
built without C++ and dynamic linking, so that should not be an
issue. However, as LLVM libc is not complete yet there will probably
be missing functions. I asked Michael about this and got the following
reponse:
#+begin_quote
The full-build mode has most of the normal functions you'd want, but
it's not complete quite yet. Most C programs I've tried work, but
building libc++ runs into issues because it assumes the libc is
complete. If you want a list of which functions are available, look
here:
https://github.com/llvm/llvm-project/blob/main/libc/config/linux/x86_64/entrypoints.txt.
I'd guess that python wouldn't quite work yet since we don't have all
of the double precision math functions yet, though you might be able
to fudge it by creating entrypoints that just call the single
precision versions.
#+end_quote
My idea here is to temporarily hack in the missing functions and later
on work to get these missing functions upstreamed into LLVM libc. To
my help I will use [[https://openlibm.org/][Julia's openlibm]] and [[https://wiki.musl-libc.org/mathematical-library.html][musl's libm]].

* Deliverables
+ Portage running on a llvm-libc/Linux system.
+ Basic utilities for a terminal-based desktop.
+ An experimental stage3 tarball for other users.
+ Documentation on Gentoo wiki and blog posts.
+ Being able to use Crossdev with the LLVM toolchain.

* Timeline
Expected 350 hours. (12 weeks, 28h/week)
Will work 6 hours a day on mon, tue, wed & thu and 5 hours on sundays.
As I also did Gentoo GSoC last year I will dedicate no time to learn
Gentoo's workflow such as Bugzilla or Git.

For initial porting I will set up a llvm-libc/Linux chroot system
using the Linux from Scratch manual. Here I will work on getting all
needed dependencies for Portage to run.

After this is done I will instead switch focus to crossdev for
development because it makes things such as creating stage3 tarballs
easy.

** Expected weekly work

*** Week 1
This week I will set up a LLVM toolchain and sysroot for compiling
programs targeting LLVM libc. I will also start setting up a
"llvm-libc/Linux from Scratch" chroot.

*** Week 2
This week I will get core libraries and utilities set up for my
chroot that are necessary to get Python running. If I have time I will
also work on getting Python running.

*** Week 3
After this week Python should run in my chroot. This will require me
to temporarily hack in some math functions as I alluded to
earlier. Later in this project I will work on getting these
upstreamed.

*** Week 4
During this week I will work on getting Crossdev be able to use the
LLVM toolchain. To do this I will extend crossdev so it is able
to compile ~sys-libs/compiler-rt~ for other triples than ~CHOST~. I
intend to use this during the  project and work on bugs as they come
up. Later on after testing I will work on getting it upstreamed.

*** Week 5
After this week I will have a ~x86_64-gentoo-linux-llvm~ crossdev
toolchain ready that compiles binaries using Clang and links to LLVM
libc. From here on I will work using this instead of the LFS
environment.

*** Week 6 and 7
During these weeks I will work on getting @system built and
running. Most test suites should also pass.by week 7.
This will not include system compiler.

*** Week 8
This week I will get other terminal utilities running. Such as the
~mg~ editor, ~cURL~, ~gdb~ and ~OpenDoas~. As many test suites as possible
should run, unless they have unreasonable dependencies. For example GDB:
#+begin_quote
Doxygen-1.9.6, GCC-12.2.0 (ada, gfortran, and go are used for tests),
Guile-3.0.9, Python-2.7.18, rustc-1.68.1 (used for some tests),
Valgrind-3.20.0, and SystemTap (run-time, used for
tests)
--- https://www.linuxfromscratch.org/blfs/view/svn/general/gdb.html
#+end_quote

*** Week 9
Further polishing the LLVM integration for Crossdev. Work on
upstreaming.

*** Week 10 and 11
This week I will work on getting my changes to LLVM libc, like fudged
in functions properly upstreamed. I do not expect every function to
get upstreamed after week 11, but initial work should be done.

*** Week 12
This week will be dedicated to documentation and things like
publishing stage3 tarballs so others users can test Gentoo with LLVM
libc and actually use what I have done.

Documentation will be written continuously during the project, and
blog posts will be made at the end of each week.
If I discover something I want to write about or think is extremely
useful I may write a separate blog post for that at any time during
the project as well.

* Backup Plan
My backup plan is to do the exact same thing but instead with overlay
mode. This will instantly get much more software running because it
can fall back to system libc for missing functionality.


* Biography
Hello! My name is Alfred. I am a Swedish 20 year old and I've been a
Gentoo user for around 2.5 years now comming from Windows and macOS.

** Last year's GSoC
Last year I did a Gentoo GSoC project about extending musl support for
KDE on Gentoo. It involved fixing a lot of build-time errors, mostly for
KDE dependencies using GNU extensions, as well as some runtime issues
that caused crashes.

During last year's project I learned a lot regarding
workflow, for example, efficiently using Git with Magit, creating
patches, and working with ebuild repostories using pkgdev. I worked a
lot with both the main Gentoo repository and also various upstreams.

Another thing I got experience with was working with build
systems such as CMake and Meson.

** Computer knowledge before GSoC
Before GSoC I had experience with C++, the Windows API, x86 assembly,
and low level debugging with various Windows debuggers. This was
because I got interested in creating game cheats at an early age. I
also knew some basic usage of Git, but because I never worked with
other people it was mostly:
~git commit -am "change"; git push~.


I think Gentoo is an awesome operating system because it gives the
user so much control.
