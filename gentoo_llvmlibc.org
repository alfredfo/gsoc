#+TITLE: Gentoo GSoC 2023 Application for Bootstapping Gentoo with The LLVM C Library
#+AUTHOR: Alfred Persson Forsberg <cat@catcream.org>
#+DATE:
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage[margin=1.0in]{geometry}

* Introduction
LLVM libc is a relatively new libc implementation created by the LLVM
foundation. It is still not complete and lacks some functionality one
may assume, such as dynamic linking and the ability to use ~libc++~
for linking C++ programs. This will be one of the first efforts to
create a whole actual system using it.

** Goals of the libc
The goals of this libc is to be a cross platform (Windows, macOS,
Linux and Fuschia) C library that includes a complete test suite for
both public and internal functions. It also permits fuzzing and
sanitizer instrumentation for binaries that include libc functions. It
is also easily decomposed so users can replace C library functionality
easily, to for example get consistent math precision for ~libm~.

** Standards compliance
LLVM libc will be compliant with POSIX and recent C standards, such as
C17 and C23.

** Build modes
Interestingly this libc can be built in both *fullbuild mode* and
*overlay mode*.

Fullbuild mode is the traditional way of building a libc, meaning that
the libc will be built as ~libc.a~ and all executables depending
libc functionality will link to it as usual.

Overlay mode on the other hand builds LLVM libc as ~libllvmlibc.a~ and
does not replace the system libc implementation completely. Instead it
uses link order semantics to primarily link binaries to LLVM libc, and
missing functions will instead be linked to the system
libc. [fn::Dynamic linking is not yet supported, hence only .a].

Fushcia currently uses a mixture of musl and LLVM libc. It does not
use overlay mode but instead a custom build system that takes parts
both.

#+begin_quote
The current way Fuchsia builds their libc is fairly strange. They use
their own custom build system to build a libc that's made of both LLVM
libc parts and musl parts. This makes it so that when they finish
switching all the functions over they have a single libc instead of
two complete libcs, one that now has to be removed. -- *Michael Jones
(LLVM libc developer)*
#+end_quote

* Objective
The goal of this project is to get a Gentoo Linux system running with LLVM
libc as the system libc, in other words, bootstrapping Portage
on a LLVM/Linux system. The first big step here will be getting Python
running for Portage. When this is done I will continue working on
getting more software from ::gentoo running with LLVM libc. My goal is
to have a working terminal-based desktop with simple utilities, and an
experimental stage3 for others who want to contribute, or simply want
to try something new :)

* Feasibility
I have spoken with Michael Jones, a LLVM libc developer, about this
project and gotten a very positive response. My guess is that the
hardest thing to get running here is Python. Thankfully it can be
built without C++ and dynamic linking, so that should not be an
issue. However, as LLVM libc is not complete yet there will probably
be missing functions. I asked Michael about this and got the following
reponse:
#+begin_quote
The full-build mode has most of the normal functions you'd want, but
it's not complete quite yet. Most C programs I've tried work, but
building libc++ runs into issues because it assumes the libc is
complete. If you want a list of which functions are available, look
here:
https://github.com/llvm/llvm-project/blob/main/libc/config/linux/x86_64/entrypoints.txt.
I'd guess that python wouldn't quite work yet since we don't have all
of the double precision math functions yet, though you might be able
to fudge it by creating entrypoints that just call the single
precision versions.
#+end_quote
My idea here is to temporarily hack in the missing functions and later
on work to get these missing functions upstreamed into LLVM libc. To
my help I will use [[https://openlibm.org/][Julia's openlibm]] and [[https://wiki.musl-libc.org/mathematical-library.html][musl's libm]].

* Deliverables
+ Portage running on a llvmlibc/Linux system.
+ Basic utilities for a basic terminal-based desktop.
+ An experimental stage3 tarball for other users.
+ Documentation on Gentoo wiki and blog posts.

* Timeline
Expected 350 hours. (12 weeks, 28h/week)
Will work 6 hours a day on mon, tue, wed & thu and 5 hours on sundays.

... + expected work for each week

Documentation will be written continuously during the project, and blog posts will be made at the end of each week.
If I discover something I want to write about / think is extremely useful I may write a separate blog post for that at any time during the project as well. 

* Backup Plan
My backup plan is to do the exact same thing but instead with overlay
mode. This will instantly get much more software running because it
can fall back to system libc for missing functionality.


* Biography
Hello! My name is Alfred. I am a Swedish 20 year old and I've been a
Gentoo user for around 2.5 years now comming from Windows and macOS.

... + more (my last gsoc project)

I think Gentoo is an awesome operating system because it gives the
user so much control.
